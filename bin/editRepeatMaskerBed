#!/usr/bin/env python3

import argparse
import sys
from pycbio.sys import fileOps
from pycbio.sys.color import Color
from pycbio.sys.svgcolors import SvgColors
from pycbio.hgdata.bed import BedReader

# version 2 columns are
# chromosome
# start
# end
# family
# score
# orientation
# class
# subclass
# divergence

inBedVersion = "v2"

def parseArgs():
    usage = """Edit repeat masker BED files, generated by RM2Bed.py, to adding color.
results match etc/rmskBed.as
"""
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument("--info", action="store_true",
                        help="print colors and exit")
    parser.add_argument('inBed', nargs='?', default='/dev/stdin',
                        help="input BED file")
    parser.add_argument('outBed', nargs='?', default='/dev/stdout',
                        help="output BED file")
    return parser.parse_args()

def mkColor(s):
    return Color.fromHtmlColor(s)

defaultColor = mkColor("#000080")

# either class or name here
repColorTable = {
    "(CATTC)n": mkColor("#E87C71"),
    "(GAATC)n": mkColor("#E28455"),
    "ALR/Alpha": mkColor("#D78C32"),
    "BSR/Beta": mkColor("#E370AB"),
    "BSR": mkColor("#E370AB"),  # FIXME tmp hack for V2
    "CER": mkColor("#CE9334"),
    "DNA": mkColor("#C19935"),
    "GSAT": mkColor("#B3A033"),
    "HSAT": mkColor("#A2A638"),
    "LINE": mkColor("#8CAC3E"),
    "Low_complexity": mkColor("#75B042"),
    "LSAU": mkColor("#54B346"),
    "LTR": mkColor("#51B756"),
    "RC/Helitron": mkColor("#53BB73"),
    "Retroposon": mkColor("#55BE8D"),
    "RNA": mkColor("#54C0A5"),
    "rRNA": mkColor("#52BEBB"),
    "SAR": mkColor("#51BDCE"),
    "Satellite/acro": mkColor("#4EB8DF"),
    "Satellite/telo": mkColor("#53B0E3"),
    "SATR1": mkColor("#5AA5DA"),
    "scRNA": mkColor("#6B9AD2"),
    "Simple repeat": mkColor("#8992C8"),
    "SINE": mkColor("#9A8AC1"),
    "snRNA": mkColor("#A885BC"),
    "srpRNA": mkColor("#B67EB6"),
    "SSTI": mkColor("#C378B2"),
    "SUBTEL_sa": mkColor("#D173AF"),
    "tRNA": mkColor("#ED72A5"),
    "Unknown": mkColor("#EF768C"),
    # Repeatmasker new entries incorporated as of 031921 by Savannah Hoyt
    "COMP-subunit_5SRNA_rnd-6_family-13719": SvgColors.midnightblue,
    "COMP-subunit_5SRNA_rnd-6_family-13720": SvgColors.midnightblue,
    "COMP-subunit_ACRO_rnd-5_family-1624": SvgColors.midnightblue,
    "COMP-subunit_ACRO_rnd-5_family-1625": SvgColors.midnightblue,
    "COMP-subunit_ACRO_rnd-5_family-37": SvgColors.midnightblue,
    "COMP-subunit_ACRO_rnd-5_family-38": SvgColors.midnightblue,
    "COMP-subunit_DNM1_rnd-6_family-2176": SvgColors.midnightblue,
    "COMP-subunit_FAM90A_rnd-6_family-663": SvgColors.midnightblue,
    "COMP-subunit_FAM90A_rnd-6_family-7382": SvgColors.midnightblue,
    "COMP-subunit_LSAU-BSAT_rnd-1_family-1": SvgColors.midnightblue,
    "COMP-subunit_LSAU-BSAT_rnd-1_family-10": SvgColors.midnightblue,
    "COMP-subunit_LSAU-BSAT_rnd-1_family-4": SvgColors.midnightblue,
    "COMP-subunit_LSAU-BSAT_rnd-6_family-5403": SvgColors.midnightblue,
    "COMP-subunit_MER5A1_rnd-6_family-5959": SvgColors.midnightblue,
    "COMP-subunit_TAF11_rnd-6_family-27360": SvgColors.midnightblue,
    "COMP-subunit_TELO_rnd-6_family-10479": SvgColors.midnightblue,
    "COMP-subunit_TELO_rnd-6_family-166": SvgColors.midnightblue,
    "COMP-subunit_VNTR_rnd-6_family-8746": SvgColors.midnightblue,
    "COMP-subunit_VNTR_rnd-6_family-8747": SvgColors.midnightblue,
    "SAT-VAR_rnd-1_family-9": SvgColors.midnightblue,
    "SAT-VAR_rnd-6_family-1431": SvgColors.midnightblue,
    "SAT-VAR_rnd-6_family-1442": SvgColors.midnightblue,
    "SAT-VAR_rnd-6_family-1509": SvgColors.midnightblue,
    "SAT-VAR_rnd-6_family-3554": SvgColors.midnightblue,
    "SAT-VAR_rnd-6_family-4384": SvgColors.midnightblue,
    "SAT_rnd-1_family-0": SvgColors.midnightblue,
    "GAP_chr1_80bp": SvgColors.midnightblue,
    "GAP_chr7_132bp": SvgColors.midnightblue,
    "GAP_chr7_49bp": SvgColors.midnightblue,
    "GAP_chr14-chr22_64bp": SvgColors.midnightblue,
    "GAP_chr6_34bp": SvgColors.midnightblue,
    "GAP_chr7_51bp": SvgColors.midnightblue,
    "GAP_chr7_83bp": SvgColors.midnightblue,
    "GAP_chr13_100bp": SvgColors.midnightblue,
    "GAP_chr13_100bp": SvgColors.midnightblue,
    "GAP_chrX_61bp": SvgColors.midnightblue,
    "GAP_chrX_52bp": SvgColors.midnightblue,
    "GAP_chrX_55bp": SvgColors.midnightblue,
    "GAP_chrX_54bp": SvgColors.midnightblue,
    "GAP_chrX_37bp": SvgColors.midnightblue,
    # known defaults
    "Satellite": defaultColor,
    "Simple_repeat": defaultColor,
    # FIXME: hack around
    # warning: ('Eulor2B', 'DNA?/Eulor2B', 'DNA?/undefined', 'DNA?') does not have a defined color
    # warning: ('MER124', 'DNA?/MER124', 'DNA?/undefined', 'DNA?') does not have a defined color
    "DNA?": mkColor("#C19935"),
}

warnedDefaultColors = set()
def lookupColor(*names):
    for n in names:
        clr = repColorTable.get(n)
        if clr is not None:
            return clr

    tnames = tuple(names)
    global warnedDefaultColors
    if tnames not in warnedDefaultColors:
        print(f"warning: {tnames} does not have a defined color", file=sys.stderr)
        warnedDefaultColors.add(tnames)
    return defaultColor

def editBedRecV1(rec):
    # name is family
        # name is family
    repClass, repFamily = rec.extraCols[0:2]
    # need because score is > 1000
    rec.extraCols = [int(rec.score)] + rec.extraCols
    rec.score = "0"

    rec.thickStart = rec.chromStart
    rec.thickEnd = rec.chromEnd
    rec.itemRgb = lookupColor(rec.name, repClass + "/" + rec.name, repClass + "/" + repFamily, repClass).toRgb8Str()
    rec.numStdCols = 9
    return rec

def editBedRecV2(rec):
    # "C specified for - strand
    if rec.strand == "C":
        rec.strand = "-"

    # name is family
    repClass, repSubClass = rec.extraCols[0:2]

    # RM2BED has ALR/Alpha this has ALR\Alpha
    rec.name = rec.name.replace("\\", "/")

    # need because score is > 1000
    rec.extraCols = [int(rec.score)] + rec.extraCols
    rec.score = "0"
    rec.thickStart = rec.chromStart
    rec.thickEnd = rec.chromEnd
    rec.itemRgb = lookupColor(rec.name, repClass + "/" + rec.name, repClass + "/" + repSubClass, repClass).toRgb8Str()
    rec.numStdCols = 9
    return rec

def editBedRec(rec):
    if inBedVersion == "v1":
        return editBedRecV1(rec)
    elif inBedVersion == "v2":
        return editBedRecV2(rec)
    else:
        raise Exception("inBedVersion unknown")

def printColors():
    for r, c in repColorTable.items():
        print(r, c.toRgb8Str(), sep='\t')

def main(args):
    if args.info:
        printColors()
        return 0
    with fileOps.opengz(args.outBed, "w") as outFh:
        for rec in BedReader(args.inBed, numStdCols=6):
            editBedRec(rec).write(outFh)

main(parseArgs())
